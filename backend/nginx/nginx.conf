events { worker_connections 1024; }

http {
    server {
        listen 80;
        # Redirect all HTTP traffic to HTTPS
        server_name api.status.stakecraft.com;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl;
        server_name api.status.stakecraft.com;

        # SSL Certificate paths (these will be mounted from the docker-compose file)
        ssl_certificate /etc/nginx/ssl/selfsigned.crt;
        ssl_certificate_key /etc/nginx/ssl/selfsigned.key;

        # Improve SSL security (optional but recommended for production)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:10m; # about 40000 sessions
        ssl_session_tickets off;
        # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

        location / {
            proxy_pass http://app:3000; # 'app' is the service name of your Node.js app in docker-compose
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        # Optional: Add security headers
        # add_header X-Frame-Options "SAMEORIGIN" always;
        # add_header X-XSS-Protection "1; mode=block" always;
        # add_header X-Content-Type-Options "nosniff" always;
        # add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        # add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; object-src 'none'; frame-ancestors 'none'; upgrade-insecure-requests;" always;

    }
} 